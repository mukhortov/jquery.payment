// Generated by CoffeeScript 1.10.0
(function() {
  var cardFromNumber, cardFromType, cards, defaultFormat, formatBackCardNumber, formatBackExpiry, formatCardNumber, formatExpiry, formatForwardExpiry, formatForwardSlashAndSpace, hasTextSelected, luhnCheck, onEvent, payment, reFormatCVC, reFormatCardNumber, reFormatExpiry, reFormatNumeric, replaceFullWidthChars, restrictCVC, restrictCardNumber, restrictExpiry, restrictNumeric, safeVal, setCardType, trim,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  payment = function() {
    var args, element, method;
    method = arguments[0], element = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
    if (!element) {
      return;
    }
    return payment.fn[method].apply(element, args);
  };

  payment.fn = {};

  defaultFormat = /(\d{1,4})/g;

  payment.cards = cards = [
    {
      type: 'maestro',
      patterns: [5018, 502, 503, 506, 56, 58, 639, 6220, 67],
      format: defaultFormat,
      length: [12, 13, 14, 15, 16, 17, 18, 19],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'forbrugsforeningen',
      patterns: [600],
      format: defaultFormat,
      length: [16],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'dankort',
      patterns: [5019],
      format: defaultFormat,
      length: [16],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'visa',
      patterns: [4],
      format: defaultFormat,
      length: [13, 16],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'mastercard',
      patterns: [51, 52, 53, 54, 55, 22, 23, 24, 25, 26, 27],
      format: defaultFormat,
      length: [16],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'amex',
      patterns: [34, 37],
      format: /(\d{1,4})(\d{1,6})?(\d{1,5})?/,
      length: [15],
      cvcLength: [3, 4],
      luhn: true
    }, {
      type: 'dinersclub',
      patterns: [30, 36, 38, 39],
      format: /(\d{1,4})(\d{1,6})?(\d{1,4})?/,
      length: [14],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'discover',
      patterns: [60, 64, 65, 622],
      format: defaultFormat,
      length: [16],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'unionpay',
      patterns: [62, 88],
      format: defaultFormat,
      length: [16, 17, 18, 19],
      cvcLength: [3],
      luhn: false
    }, {
      type: 'jcb',
      patterns: [35],
      format: defaultFormat,
      length: [16],
      cvcLength: [3],
      luhn: true
    }
  ];

  onEvent = function(element, eventName, callback) {
    element.addEventListener(eventName, function(e) {
      var ifPreventDefault;
      ifPreventDefault = callback(e);
      if (!ifPreventDefault) {
        e.preventDefault();
      }
      return ifPreventDefault;
    }, false);
  };

  trim = function(str) {
    return (str + '').replace(/^\s+|\s+$/g, '');
  };

  cardFromNumber = function(num) {
    var card, i, j, len, len1, p, pattern, ref;
    num = (num + '').replace(/\D/g, '');
    for (i = 0, len = cards.length; i < len; i++) {
      card = cards[i];
      ref = card.patterns;
      for (j = 0, len1 = ref.length; j < len1; j++) {
        pattern = ref[j];
        p = pattern + '';
        if (num.substr(0, p.length) === p) {
          return card;
        }
      }
    }
  };

  cardFromType = function(type) {
    var card, i, len;
    for (i = 0, len = cards.length; i < len; i++) {
      card = cards[i];
      if (card.type === type) {
        return card;
      }
    }
  };

  luhnCheck = function(num) {
    var digit, digits, i, len, odd, sum;
    odd = true;
    sum = 0;
    digits = (num + '').split('').reverse();
    for (i = 0, len = digits.length; i < len; i++) {
      digit = digits[i];
      digit = parseInt(digit, 10);
      if ((odd = !odd)) {
        digit *= 2;
      }
      if (digit > 9) {
        digit -= 9;
      }
      sum += digit;
    }
    return sum % 10 === 0;
  };

  hasTextSelected = function(target) {
    var ref;
    if ((target.selectionStart != null) && target.selectionStart !== target.selectionEnd) {
      return true;
    }
    if ((typeof document !== "undefined" && document !== null ? (ref = document.selection) != null ? ref.createRange : void 0 : void 0) != null) {
      if (document.selection.createRange().text) {
        return true;
      }
    }
    return false;
  };

  safeVal = function(value, target) {
    var currPair, cursor, digit, error, error1, last, prevPair;
    try {
      cursor = target.selectionStart;
    } catch (error1) {
      error = error1;
      cursor = null;
    }
    last = target.value;
    target.value = value;
    if (cursor !== null && target === document.activeElement) {
      if (cursor === last.length) {
        cursor = value.length;
      }
      if (last !== value) {
        prevPair = last.slice(cursor - 1, +cursor + 1 || 9e9);
        currPair = value.slice(cursor - 1, +cursor + 1 || 9e9);
        digit = value[cursor];
        if (/\d/.test(digit) && prevPair === (digit + " ") && currPair === (" " + digit)) {
          cursor = cursor + 1;
        }
      }
      target.selectionStart = cursor;
      return target.selectionEnd = cursor;
    }
  };

  replaceFullWidthChars = function(str) {
    var chars, chr, fullWidth, halfWidth, i, idx, len, value;
    if (str == null) {
      str = '';
    }
    fullWidth = '\uff10\uff11\uff12\uff13\uff14\uff15\uff16\uff17\uff18\uff19';
    halfWidth = '0123456789';
    value = '';
    chars = str.split('');
    for (i = 0, len = chars.length; i < len; i++) {
      chr = chars[i];
      idx = fullWidth.indexOf(chr);
      if (idx > -1) {
        chr = halfWidth[idx];
      }
      value += chr;
    }
    return value;
  };

  reFormatNumeric = function(e) {
    var target;
    target = e.currentTarget || e.target;
    return setTimeout(function() {
      var value;
      value = target.value;
      value = replaceFullWidthChars(value);
      value = value.replace(/\D/g, '');
      return safeVal(value, target);
    });
  };

  reFormatCardNumber = function(e) {
    var target;
    target = e.currentTarget || e.target;
    return setTimeout(function() {
      var value;
      value = target.value;
      value = replaceFullWidthChars(value);
      value = payment.formatCardNumber(value);
      return safeVal(value, target);
    });
  };

  formatCardNumber = function(e) {
    var card, digit, length, re, target, upperLength, value;
    digit = String.fromCharCode(e.which);
    if (!/^\d+$/.test(digit)) {
      return;
    }
    target = e.currentTarget || e.target;
    value = target.value;
    card = cardFromNumber(value + digit);
    length = (value.replace(/\D/g, '') + digit).length;
    upperLength = 16;
    if (card) {
      upperLength = card.length[card.length.length - 1];
    }
    if (length >= upperLength) {
      return;
    }
    if ((target.getAttribute('selectionStart') != null) && target.getAttribute('selectionStart') !== value.length) {
      return;
    }
    if (card && card.type === 'amex') {
      re = /^(\d{4}|\d{4}\s\d{6})$/;
    } else {
      re = /(?:^|\s)(\d{4})$/;
    }
    if (re.test(value)) {
      e.preventDefault();
      return setTimeout(function() {
        return target.value = value + ' ' + digit;
      });
    } else if (re.test(value + digit)) {
      e.preventDefault();
      return setTimeout(function() {
        return target.value = value + digit + ' ';
      });
    }
  };

  formatBackCardNumber = function(e) {
    var target, value;
    target = e.currentTarget || e.target;
    value = target.value;
    if (e.which !== 8) {
      return;
    }
    if ((target.getAttribute('selectionStart') != null) && target.getAttribute('selectionStart') !== value.length) {
      return;
    }
    if (/\d\s$/.test(value)) {
      e.preventDefault();
      return setTimeout(function() {
        return target.value = value.replace(/\d\s$/, '');
      });
    } else if (/\s\d?$/.test(value)) {
      e.preventDefault();
      return setTimeout(function() {
        return target.value = value.replace(/\d$/, '');
      });
    }
  };

  reFormatExpiry = function(e) {
    var target;
    target = e.currentTarget || e.target;
    return setTimeout(function() {
      var value;
      value = target.value;
      value = replaceFullWidthChars(value);
      value = payment.formatExpiry(value);
      return safeVal(value, target);
    });
  };

  formatExpiry = function(e) {
    var digit, target, val;
    digit = String.fromCharCode(e.which);
    if (!/^\d+$/.test(digit)) {
      return;
    }
    target = e.currentTarget || e.target;
    val = target.value + digit;
    if (/^\d$/.test(val) && (val !== '0' && val !== '1')) {
      e.preventDefault();
      return setTimeout(function() {
        return target.value = "0" + val + " / ";
      });
    } else if (/^\d\d$/.test(val)) {
      e.preventDefault();
      return setTimeout(function() {
        var m1, m2;
        m1 = parseInt(val[0], 10);
        m2 = parseInt(val[1], 10);
        if (m2 > 2 && m1 !== 0) {
          return target.value = "0" + m1 + " / " + m2;
        } else {
          return target.value = val + " / ";
        }
      });
    }
  };

  formatForwardExpiry = function(e) {
    var digit, target, val;
    digit = String.fromCharCode(e.which);
    if (!/^\d+$/.test(digit)) {
      return;
    }
    target = e.currentTarget || e.target;
    val = target.value;
    if (/^\d\d$/.test(val)) {
      return target.value = val + " / ";
    }
  };

  formatForwardSlashAndSpace = function(e) {
    var target, val, which;
    which = String.fromCharCode(e.which);
    if (!(which === '/' || which === ' ')) {
      return;
    }
    target = e.currentTarget || e.target;
    val = target.value;
    if (/^\d$/.test(val) && val !== '0') {
      return target.value = "0" + val + " / ";
    }
  };

  formatBackExpiry = function(e) {
    var target, value;
    target = e.currentTarget || e.target;
    value = target.value;
    if (e.which !== 8) {
      return;
    }
    if ((target.getAttribute('selectionStart') != null) && target.getAttribute('selectionStart') !== value.length) {
      return;
    }
    if (/\d\s\/\s$/.test(value)) {
      e.preventDefault();
      return setTimeout(function() {
        return target.value = value.replace(/\d\s\/\s$/, '');
      });
    }
  };

  reFormatCVC = function(e) {
    var target;
    target = e.currentTarget || e.target;
    return setTimeout(function() {
      var value;
      value = target.value;
      value = replaceFullWidthChars(value);
      value = value.replace(/\D/g, '').slice(0, 4);
      return safeVal(value, target);
    });
  };

  restrictNumeric = function(e) {
    var input;
    if (e.metaKey || e.ctrlKey) {
      return true;
    }
    if (e.which === 32) {
      return false;
    }
    if (e.which === 0) {
      return true;
    }
    if (e.which < 33) {
      return true;
    }
    input = String.fromCharCode(e.which);
    return !!/[\d\s]/.test(input);
  };

  restrictCardNumber = function(e) {
    var card, digit, target, value;
    target = e.currentTarget || e.target;
    digit = String.fromCharCode(e.which);
    if (!/^\d+$/.test(digit)) {
      return true;
    }
    if (hasTextSelected(target)) {
      return true;
    }
    value = (target.value + digit).replace(/\D/g, '');
    card = cardFromNumber(value);
    if (card) {
      return value.length <= card.length[card.length.length - 1];
    } else {
      return value.length <= 16;
    }
  };

  restrictExpiry = function(e) {
    var digit, target, value;
    target = e.currentTarget || e.target;
    digit = String.fromCharCode(e.which);
    if (!/^\d+$/.test(digit)) {
      return true;
    }
    if (hasTextSelected(target)) {
      return true;
    }
    value = target.value + digit;
    value = value.replace(/\D/g, '');
    return !(value.length > 6);
  };

  restrictCVC = function(e) {
    var digit, target, val;
    target = e.currentTarget || e.target;
    digit = String.fromCharCode(e.which);
    if (!/^\d+$/.test(digit)) {
      return true;
    }
    if (hasTextSelected(target)) {
      return true;
    }
    val = target.value + digit;
    return val.length <= 4;
  };

  setCardType = function(e) {
    var allTypes, card, cardType, event, i, len, target, type, val;
    target = e.currentTarget || e.target;
    val = target.value;
    cardType = payment.cardType(val) || 'unknown';
    if (!target.classList.contains(cardType)) {
      allTypes = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = cards.length; i < len; i++) {
          card = cards[i];
          results.push(card.type);
        }
        return results;
      })();
      target.classList.remove('unknown');
      for (i = 0, len = allTypes.length; i < len; i++) {
        type = allTypes[i];
        target.classList.remove(type);
      }
      target.classList.add(cardType);
      target.classList.toggle('identified', cardType !== 'unknown');
      event = new CustomEvent('payment.cardType', cardType);
      target.dispatchEvent(event);
      return target;
    }
  };

  payment.fn.formatCardCVC = function() {
    payment('restrictNumeric', this);
    onEvent(this, 'keypress', restrictCVC);
    this.addEventListener('paste', reFormatCVC, false);
    this.addEventListener('change', reFormatCVC, false);
    this.addEventListener('input', reFormatCVC, false);
    return this;
  };

  payment.fn.formatCardExpiry = function() {
    payment('restrictNumeric', this);
    onEvent(this, 'keypress', restrictExpiry);
    this.addEventListener('keypress', formatExpiry, false);
    this.addEventListener('keypress', formatForwardSlashAndSpace, false);
    this.addEventListener('keypress', formatForwardExpiry, false);
    this.addEventListener('keydown', formatBackExpiry, false);
    this.addEventListener('change', reFormatExpiry, false);
    this.addEventListener('input', reFormatExpiry, false);
    return this;
  };

  payment.fn.formatCardNumber = function() {
    payment('restrictNumeric', this);
    onEvent(this, 'keypress', restrictCardNumber);
    this.addEventListener('keypress', formatCardNumber, false);
    this.addEventListener('keydown', formatBackCardNumber, false);
    this.addEventListener('keyup', setCardType, false);
    this.addEventListener('paste', reFormatCardNumber, false);
    this.addEventListener('change', reFormatCardNumber, false);
    this.addEventListener('input', reFormatCardNumber, false);
    this.addEventListener('input', setCardType, false);
    return this;
  };

  payment.fn.restrictNumeric = function() {
    onEvent(this, 'keypress', restrictNumeric);
    this.addEventListener('paste', reFormatNumeric, false);
    this.addEventListener('change', reFormatNumeric, false);
    this.addEventListener('input', reFormatNumeric, false);
    return this;
  };

  payment.fn.cardExpiryVal = function() {
    return payment.cardExpiryVal(this.value);
  };

  payment.cardExpiryVal = function(value) {
    var month, prefix, ref, year;
    ref = value.split(/[\s\/]+/, 2), month = ref[0], year = ref[1];
    if ((year != null ? year.length : void 0) === 2 && /^\d+$/.test(year)) {
      prefix = (new Date).getFullYear();
      prefix = prefix.toString().slice(0, 2);
      year = prefix + year;
    }
    month = parseInt(month, 10);
    year = parseInt(year, 10);
    return {
      month: month,
      year: year
    };
  };

  payment.validateCardNumber = function(num) {
    var card, ref;
    num = (num + '').replace(/\s+|-/g, '');
    if (!/^\d+$/.test(num)) {
      return false;
    }
    card = cardFromNumber(num);
    if (!card) {
      return false;
    }
    return (ref = num.length, indexOf.call(card.length, ref) >= 0) && (card.luhn === false || luhnCheck(num));
  };

  payment.validateCardExpiry = function(month, year) {
    var currentTime, expiry, ref;
    if (typeof month === 'object' && 'month' in month) {
      ref = month, month = ref.month, year = ref.year;
    }
    if (!(month && year)) {
      return false;
    }
    month = trim(month);
    year = trim(year);
    if (!/^\d+$/.test(month)) {
      return false;
    }
    if (!/^\d+$/.test(year)) {
      return false;
    }
    if (!((1 <= month && month <= 12))) {
      return false;
    }
    if (year.length === 2) {
      if (year < 70) {
        year = "20" + year;
      } else {
        year = "19" + year;
      }
    }
    if (year.length !== 4) {
      return false;
    }
    expiry = new Date(year, month);
    currentTime = new Date;
    expiry.setMonth(expiry.getMonth() - 1);
    expiry.setMonth(expiry.getMonth() + 1, 1);
    return expiry > currentTime;
  };

  payment.validateCardCVC = function(cvc, type) {
    var card, ref;
    cvc = trim(cvc);
    if (!/^\d+$/.test(cvc)) {
      return false;
    }
    card = cardFromType(type);
    if (card != null) {
      return ref = cvc.length, indexOf.call(card.cvcLength, ref) >= 0;
    } else {
      return cvc.length >= 3 && cvc.length <= 4;
    }
  };

  payment.cardType = function(num) {
    var ref;
    if (!num) {
      return null;
    }
    return ((ref = cardFromNumber(num)) != null ? ref.type : void 0) || null;
  };

  payment.formatCardNumber = function(num) {
    var card, groups, ref, upperLength;
    num = num.replace(/\D/g, '');
    card = cardFromNumber(num);
    if (!card) {
      return num;
    }
    upperLength = card.length[card.length.length - 1];
    num = num.slice(0, upperLength);
    if (card.format.global) {
      return (ref = num.match(card.format)) != null ? ref.join(' ') : void 0;
    } else {
      groups = card.format.exec(num);
      if (groups == null) {
        return;
      }
      groups.shift();
      groups = groups.filter(Number);
      return groups.join(' ');
    }
  };

  payment.formatExpiry = function(expiry) {
    var mon, parts, sep, year;
    parts = expiry.match(/^\D*(\d{1,2})(\D+)?(\d{1,4})?/);
    if (!parts) {
      return '';
    }
    mon = parts[1] || '';
    sep = parts[2] || '';
    year = parts[3] || '';
    if (year.length > 0) {
      sep = ' / ';
    } else if (sep === ' /') {
      mon = mon.substring(0, 1);
      sep = '';
    } else if (mon.length === 2 || sep.length > 0) {
      sep = ' / ';
    } else if (mon.length === 1 && (mon !== '0' && mon !== '1')) {
      mon = "0" + mon;
      sep = ' / ';
    }
    return mon + sep + year;
  };

  window.payment = payment;

}).call(this);
